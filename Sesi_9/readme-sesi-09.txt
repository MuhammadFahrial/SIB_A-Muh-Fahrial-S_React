SPA (Aplikasi satu halaman) adalah implementasi aplikasi web yang memuat hanya satu dokumen web, dan kemudian memperbarui konten isi dokumen tunggal tersebut melalui API JavaScript seperti XMLHttpRequest dan Fetch ketika konten yang berbeda akan ditampilkan. Oleh karena itu, ini memungkinkan pengguna untuk menggunakan situs web tanpa memuat halaman baru dari server, yang dapat menghasilkan peningkatan kinerja dan pengalaman yang lebih dinamis, dengan beberapa kerugian tradeoff seperti SEO, lebih banyak upaya yang diperlukan untuk mempertahankan status, menerapkan navigasi, dan melakukan pemantauan kinerja yang berarti

Secara teori, single page application merupakan aplikasi yang bekerja di dalam browser yang tidak membutuhkan reload page saat digunakan. Dengan kata lain, pengguna atau user tidak akan berpindah halaman dengan melakukan request kepada server setiap kali terjadi interaksi pada aplikasi. Yang membedakan SPA dengan non-SPA adalah single page application hanya akan melakukan load terhadap satu halaman dari server kemudian mekanisme routing yang biasanya di-handle oleh server kini dibebankan pada client. Akibatnya, website yang menggunakan SPA memiliki performa yang lebih cepat tanpa harus load halaman secara terus menerus.

React Router Basic
React Router adalah koleksi dari komponen yang mampu melakukan navigasi aplikasi secara deklaratif. Seperti pada aplikasi web pada umumnya, kita akan membutuhkan fasilitas router untuk melakukan routing. Routing ini bisa berupa tombol atau link, sesuai bagaimana temen-temen menerapkan stylingnya. Pada sesi ini, kita akan implementasikan fungsionalitas nya.

Ada 3 component utama dalam meng-implementasikan React Routers :
1. Router, yaitu <BrowserRouter>
2. Route, yaitu <Route> yang akan menjadi nested component dari <Routes>
3. Navigation, di antaranya adalah <Link>, <NavLink>, dan <Redirect>

Bagaimana jika kita mempunyai sebuah halaman, yang memiliki sub halaman ? Di sini kita bisa handle situasi seperti ini dengan menggunakan tekhnik nesting. Mari kita implementasikan tekhnik ini melalui sebuah contoh kasus dimana di dalam halaman About Us, kita mau tambahkan 2 buah sub halaman yaitu : About The Company dan About Me

Seringkali kita membutuhkan alamat URL yang dinamis dengan menggunakan parameter. Kita bisa menggunakan format :<nama params> untuk melakukan hal ini dan membaca value dari <nama params> tersebut. Misalkan untuk halaman profil member dari halaman members

Bagaimana jika kita akan mengolah data yang dinamis ? Sebagai contoh, data hasil pemanggilan dari API ? Maka kita bisa memanfaatkan programmatic navigation untuk melakukan navigasi secara dinamis. Pada contoh kasus kali ini, kita akan menggunakan sebuah file yang berisi data array of object sebagai simulasi dari hasil return dari sebuah API call. Kemudian, kita akan menampilkan detail masing-masing item ke dalam 1 buah komponen saja secara programmatic

Sudah menjadi kebutuhan standard dalam pengembangan aplikasi, bahwa akan ada fitur atau halaman yang hanya bisa diakses oleh user tertentu. Dan penentu akses ini adalah melalui login. Kita akan implementasi flow login sederhana, dimana fitur atau halaman Items hanya bisa dilihat oleh user yang sudah login. Flow yang akan kita implementasi untuk pembelajaran kali ini cukup sederhana, yaitu jika kita akses halaman yang hendak kita proteksi dengan authentication, maka kita akan diarahkan ke halaman Login terlebih dahulu, JIKA kita belum login ( authenticated ). Dan setelah melakukan login, maka kita akan diarahkan ke halaman yang hendak kita akses sebelum login. Dalam studi kasus kali ini, kita akan proteksi halaman Items. Mekanisme login yang akan kita gunakan hanyalah memanfaatkan localStorage untuk membuat item bernama token. Token ini akan menjadi penanda kita apakah kita sudah login atau belum

Tidak seperti versi sebelumnya, di versi ini tidak ada function atau component khusus dengan nama “Redirect” untuk melakukan redirection. Di versi ini, kita lebih diarahkan kepada konsep “navigasi”, dimana jika kita perhatikan secara seksama, Redirect pun sebenarnya adalah navigasi yang biasanya dilakukan karena / setelah kondisi tertentu. Misalkan kita akan Redirect user setelah login. Ini berarti kita akan melakukan navigasi ke suatu route setelah login selesai. Kita akan berkenalan dengan hook useNavigate untuk melakukan navigasi secara programmatic, dan component Navigate untuk melakukan navigasi dari JSX